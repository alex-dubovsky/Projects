library(DoubleML)
library(devtools)
library(remotes)
library(vars)
library(readxl)
library(fbi)
library(ggpattern)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(reshape2)
library(bigtime)
library(xtable)
library(stats)
library(rrpack)
library(MTS)
library(urca)
library(Matrix)
library(MCMCpack)
library(tictoc)
library(parallel)
library(doParallel)
library(foreach)
library(tseries)
library(missMethods)
library(norm)
library(data.table)
library(glmnet)
library(here)
source(here("UCL/Dissertation", "DFM_Functions.R"))
source(here("UCL/Dissertation", "Data Functions.R"))
setwd(here("UCL/Dissertation/Outputs"))
path = here("UCL/Dissertation/Data")
files = list.files(path, pattern = "\\.xlsx?$", full.names = TRUE)
all_list <- lapply(files, read_excel)
stems = tools::file_path_sans_ext(basename(files)) #file_path_sans_ext = filepaths without extensions, basename = remove all of the path up to last separator(/)
names(all_list) = stems
monthly_stock_id = c( # prefixes of the variables in each dataset which are stock variables
"IRT3M","IRT6M","LTIRT",
# (7) Industrial production & turnover indexes
"IPMN","IPCAG","IPDOG","IPIDCOG","IPINDCOG","IPING","IPINRG",
"TRNNM","TRNCAG","TRNCOG","TRNDCG","TRNNDCG","TRNING","TRNNRG",
# (8) Prices
"PPICAG","PPICOG","PPIDCOG","PPINDCOG","PPING","PPINRG",
"HICPOV","HICPNEF","HICPCG","HICPIN","HICPSV","HICPNG",
# (9) Confidence indicators
"ICONFIX","CCONFIX","ESENTX","KCONFIX","RTCONFIX","SCONFIX","BCI","CCI",
# (10) Monetary aggregates (levels)
"CURR","M1","M2",
# (11) Others
"SHIX"
)
monthly_flow_id = c(
"CAREG"
)
ea_Q <- aggregate_monthlies_by_id(all_list[[4]], date_col = "Time")
View(ea_Q)
x = as.data.table(copy(dt))
dt = all_list[[4]]
x = as.data.table(copy(dt))
x
View(x)
x[, (date_col) := coerce_date(get(date_col))] # assign time column as date object version of itself
date+col = "Time"
date_col = "Time"
x[, (date_col) := coerce_date(get(date_col))] # assign time column as date object version of itself
x
View(x)
View(dt)
yy = as.integer(format(x[[date_col]], "%Y")) #extracts year numbers
yy
View(yy)
mm = as.integer(format(x[[date_col]], "%m")) # extracts month numbers
mm
qq = (mm - 1L) %/% 3L + 1L # sorts "months" into the quarters of the year
qq
x[, `:=`(qkey = paste0(yy,"Q",qq),
qstart = as.Date(sprintf("%d-%02d-01", yy, (qq - 1L) * 3L + 1L)))]
View(x)
x[, `:=`(qkey = paste0(yy,"Q",qq),
qstart = as.Date(sprintf("%d-%02d-01", yy, (qq - 1L) * 3L + 1L)))]
View(x)
path = here("UCL/Dissertation/Data")
files = list.files(path, pattern = "\\.xlsx?$", full.names = TRUE)
all_list <- lapply(files, read_excel)
stems = tools::file_path_sans_ext(basename(files)) #file_path_sans_ext = filepaths without extensions, basename = remove all of the path up to last separator(/)
names(all_list) = stems
monthly_stock_id = c( # prefixes of the variables in each dataset which are stock variables
"IRT3M","IRT6M","LTIRT",
# (7) Industrial production & turnover indexes
"IPMN","IPCAG","IPDOG","IPIDCOG","IPINDCOG","IPING","IPINRG",
"TRNNM","TRNCAG","TRNCOG","TRNDCG","TRNNDCG","TRNING","TRNNRG",
# (8) Prices
"PPICAG","PPICOG","PPIDCOG","PPINDCOG","PPING","PPINRG",
"HICPOV","HICPNEF","HICPCG","HICPIN","HICPSV","HICPNG",
# (9) Confidence indicators
"ICONFIX","CCONFIX","ESENTX","KCONFIX","RTCONFIX","SCONFIX","BCI","CCI",
# (10) Monetary aggregates (levels)
"CURR","M1","M2",
# (11) Others
"SHIX"
)
monthly_flow_id = c(
"CAREG"
)
ea_Q <- aggregate_monthlies_by_id(all_list[[4]], date_col = "Time")
View(ea_Q)
# Euro Area
EA_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","EAdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","EAdataQM_BN_LT.xlsx"
View(EA_Q)
series_cols = setdiff(names(x), c(date_col,"qkey","qstart")) # all columns except c(...)
series_cols
x[, (series_cols) := lapply(.SD, function(z) suppressWarnings(as.numeric(z))), .SDcols = series_cols]
x
long <- data.table::melt(x, id.vars = c("qkey","qstart"),
measure.vars = series_cols,
variable.name = "var", value.name = "value",
variable.factor = FALSE)
View(long)
long[, id := series_id(var)]
View(long)
long[, rule := fifelse(id %chin% sum_ids, "sum",
fifelse(id %chin% avg_ids, "avg", "keep"))]
sum_ids = monthly_flow_id
long[, rule := fifelse(id %chin% sum_ids, "sum",
fifelse(id %chin% avg_ids, "avg", "keep"))]
avg_ids = monthly_stock_id
long[, rule := fifelse(id %chin% sum_ids, "sum",
fifelse(id %chin% avg_ids, "avg", "keep"))]
View(long)
long[, rule := fifelse(id %chin% sum_ids, "sum",
fifelse(id %chin% avg_ids, "avg", "keep"))]
View(long)
agg <- long[, {
v <- value[!is.na(value)]; n <- length(v)
out <- if (rule[1] == "keep") {
if (n >= 1L) v[1L] else NA_real_                        # quarterly -> keep
} else {                                                  # monthly
if (n == 3L && data.table::uniqueN(v) == 1L) v[1L]      # repeated stamp guard
else if (n == 3L && rule[1] == "sum") sum(v)
else if (n == 3L && rule[1] == "avg") mean(v)
else NA_real_                                           # 0/2 months -> NA
}
.(value = out)
}, by = .(qstart, var, rule)]
View(agg)
wide = data.table::dcast(agg, qstart ~ var, value.var = "value")
View(wide)
View(EA_Q)
Data_list =  aggregate_list_monthlies(all_list, date_col = "Time")
View(Data_list)
View(EA_Q)
raw_data = read_xlsx("C:/Users/AlexD/Documents/Economics/UCL/Dissertation/Data/EA-MD-QD-06-2025/EAdata.xlsx")
View(raw_data)
View(ea_Q)
DE_LT <- c(
# (1) National Accounts (1–17)
2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,
# (2) Labor Market Indicators (18–38)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,
# (3) Credit Aggregates (39–61)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (4) Labor Costs (62–68)
2,2,2,2,2,2,2,2,
# (5) Exchange Rates (69)
2,
# (6) Interest Rates (70)
4,
# (7) Industrial Production and Turnover (71–84)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (8) Prices (85–98)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (9) Confidence Indicators (99–106)
0,0,0,0,0,0,2,2,
# (10) Others (107)
2
)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
View(all_list)
DE = data_transform(all_list[[3]],transform_codes = DE_LT)
View(DE)
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
View(Data_list)
Data_list[[3]]
DE_LT <- c(
# (1) National Accounts (1–17)
2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,
# (2) Labor Market Indicators (18–38)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,
# (3) Credit Aggregates (39–61)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
# (4) Labor Costs (62–68)
2,2,2,2,2,2,2,
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
View(DE)
View(Data_list)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE_LT <- c(
# (1) National Accounts (1–17)
2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,
# (2) Labor Market Indicators (18–38)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,
# (3) Credit Aggregates (39–61)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (4) Labor Costs (62–68)
2,2,2,2,2,2,2,
# (5) Exchange Rates (69)
2,
# (6) Interest Rates (70)
4,
# (7) Industrial Production and Turnover (71–84)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (8) Prices (85–98)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (9) Confidence Indicators (99–106)
0,0,0,0,0,0,2,2,
# (10) Others (107)
2
)
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
class(Data_list[[3]])
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
class(Data_all[[3]])
class(Data_list[[3]])
class(DE_LT)
rep(1,100)
class(rep(1,100))
DE_LT[1]
DE_LT <- c(
# (1) National Accounts (1–17)
0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,
# (2) Labor Market Indicators (18–38)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,
# (3) Credit Aggregates (39–61)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (4) Labor Costs (62–68)
2,2,2,2,2,2,2,
# (5) Exchange Rates (69)
2,
# (6) Interest Rates (70)
4,
# (7) Industrial Production and Turnover (71–84)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (8) Prices (85–98)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (9) Confidence Indicators (99–106)
0,0,0,0,0,0,2,2,
# (10) Others (107)
2
)
ret = Data_list[[3]][-c(1)]
View(ret)
Data_list[[3]]
ret[[1]]
ret[[2]]
mat
mat = Data_list[[3]]
unlist(mat[-1,1])
View(unlist(mat[-1,1]))
DE_LT <- c(
# (1) National Accounts (1–17)
0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,
# (2) Labor Market Indicators (18–38)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,
# (3) Credit Aggregates (39–61)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (4) Labor Costs (62–68)
2,2,2,2,2,2,2,
# (5) Exchange Rates (69)
2,
# (6) Interest Rates (70)
4,
# (7) Industrial Production and Turnover (71–84)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (8) Prices (85–98)
2,2,2,2,2,2,2,2,2,2,2,2,2,2,
# (9) Confidence Indicators (99–106)
0,0,0,0,0,0,2,2,
# (10) Others (107)
2
)
source(here("UCL/Dissertation", "PreProcessing Functions.R"))
DE = data_transform(Data_list[[3]],transform_codes = DE_LT)
transform_codes = DE_LT
transform_codes
transform_codes[1]<-0  #if transform codes are not NULL skip the above
transform_codes
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i])
#ret<-mat[-c(1),] #removes the first row of the data matrix. Assumes the first row of the matrix is the transformation codes
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
class(mat)
mat[-1.i]
mat[-1]
View(mat[-1])
View(mat[-1,])
View(mat[-1,i])
matrix = as.matrix(Data_list[[3]])
View(matrix)
Mat_list <- lapply(Data_list, as.matrix)
View(Mat_list)
class(Mat_list[[1]])
DE = data_transform(Mat_list[[3]],transform_codes = DE_LT)
View(DE)
ret<-mat #removes the first row of the data matrix. Assumes the first row of the matrix is the transformation codes
ret
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
class(ret)
mat
mat = as.matrix(mat)
mat = Mat_list[[3]]
class(mat)
ret = mat
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
ret
View(ret)
length(ret)
length(transform_codes)
dim(ret)
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
transform_codes = DE_LT
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[[i]]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
for(i in 1:ncol(mat)){ #for each variable in the data matrix (ret[[i]] is each column of ret)
ret[i]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
}
warnings()
ret[1]
ret[2]
ret
ret[,i]<-individual_transform(column=as.numeric(unlist(mat[-1, i])), code=transform_codes[i]) #column = loop over the variables in the data
ret[,1]
class(ret)
Mat_list <- lapply(Data_list, as.data.frame)
View(Mat_list)
class(Mat_list[[3]])
slow_names =
DE = data_transform(Mat_list[[3]],transform_codes = DE_LT)
View(Data_list)
View(DE)
class(Mat_list[[3]][,1])
