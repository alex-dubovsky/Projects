install.packages(pkgs = c("remotes","vars","readx",'ggpatterm','dplyr','ggplot2','ggpubr','reshape2','bigtime','xtable','stats','rrpack','MTS','urca','
MCMCpack','tictoc','purrr'))
path = here("UCL/Dissertation")
install.packages(pkgs = c("dplyr", "ggpattern", "ggplot2", "ggpubr", "readxl", "reshape2","bigtime","xtable","here"))
devtools::install_github("cykbennie/fbi")
library(DoubleML)
library(devtools)
library(remotes)
library(vars)
library(readxl)
library(fbi)
library(ggpattern)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(reshape2)
library(bigtime)
library(xtable)
library(stats)
library(rrpack)
library(MTS)
library(urca)
library(Matrix)
library(MCMCpack)
library(tictoc)
library(parallel)
library(doParallel)
library(foreach)
library(tseries)
library(missMethods)
library(norm)
library(data.table)
library(glmnet)
library(here)
source(here("UCL/Dissertation", "DFM_Functions.R"))
source(here("UCL/Dissertation", "Data Functions.R"))
setwd(here("UCL/Dissertation/Outputs"))
path = here("UCL/Dissertation")
files = list.files(path,pattern = "\\.xlsx?$", full.names = TRUE))
files = list.files(path,pattern = "\\.xlsx?$", full.names = TRUE)
all_data = files %>%
set_name() %>%
map(read_excel) %>%
bind_rows(.id = "source_file")
path = here("UCL/Dissertation/Data")
files = list.files(path, pattern = "\\.xlsx?$", full.names = TRUE)
all_list <- lapply(files, read_excel)
View(all_list)
all_data <- do.call(rbind, lapply(seq_along(all_list), function(i) {
cbind(source_file = basename(files[i]), all_list[[i]])
}))
map <- c(EA = "Europe", DE = "Germany", FR = "France")
names(all_list) <- unname(map[names(all_list)])
View(all_list)
names(all_list)
path = here("UCL/Dissertation/Data")
files = list.files(path, pattern = "\\.xlsx?$", full.names = TRUE)
all_list <- lapply(files, read_excel)
names(all_list)
map <- c(EA = "Europe", DE = "Germany", FR = "France")
names(all_list) <- unname(map[names(all_list)])
stems = tools::file_path_sans_ext(basename(files))
names(all_list) = stems
View(all_list)
view(all_list)['EAdata']
View(all_list)['EAdata']
View(all_list)
View(all_list['EAdata])
#### Quarterly
# Euro Area
#EA_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","EAdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","EAdataQM_BN_LT.xlsx"
# Germany
#DE_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","DEdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","DEdataQM_BN_LT.xlsx"
# Belgium
#BE_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","BEdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","BEdataQM_BN_LT.xlsx"
# Italy
#IT_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","ITdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","ITdataQM_BN_LT.xlsx"
# Ireland
#IE_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","IEdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","IEdataQM_BN_LT.xlsx"
# France
#FR_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","FRdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","FRdataQM_BN_LT.xlsx"
# Portugal
#PT_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","PTdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","PTdataQM_BN_LT.xlsx"
# Netherlands
#NL_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","NLdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","NLdataQM_BN_LT.xlsx"
## Spain
#ES_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","ESdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","ESdataQM_BN_LT.xlsx"
# Austria
#AT_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","ATdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","ATdataQM_BN_LT.xlsx"
# Greece
#GC_Q = read_xlsx(here("UCL/Dissertation/Data/Quarterly","ELdataQM_BN_LT.xlsx")) # "UCL/Dissertation/Data/Quarterly","ELdataQM_BN_LT.xlsx"
#### Monthly
# Euro Area
#EA_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","EAdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","EAdataM_BN_LT.xlsx"
# Germany
#DE_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","DEdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","DEdataM_BN_LT.xlsx"
# Belgium
#BE_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","BEdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","BEdataM_BN_LT.xlsx"
# Italy
#IT_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","ITdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","ITdataM_BN_LT.xlsx"
# Ireland
#IE_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","IEdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","IEdataM_BN_LT.xlsx"
# France
#FR_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","FRdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","FRdataM_BN_LT.xlsx"
# Portugal
#PT_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","PTdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","PTdataM_BN_LT.xlsx"
# Netherlands
#NL_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","NLdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","NLdataM_BN_LT.xlsx"
# Spain
#ES_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","ESdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","ESdataM_BN_LT.xlsx"
# Austria
#AT_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","ATdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","ATdataM_BN_LT.xlsx"
# Greece
#GC_M = read_xlsx(here("UCL/Dissertation/Data/Monthly","ELdataM_BN_LT.xlsx"))    # "UCL/Dissertation/Data/Monthly","ELdataM_BN_LT.xlsx"
countries <- c("EA","DE","BE","IT","IE","FR","PT","NL","ES","AT","GC")
all_datasets <- c(paste0(countries, "_Q"),paste0(countries, "_M"))
Stationary_Checks <- setNames(lapply(all_datasets, function(nm) stationarity_table(get(nm))),
all_datasets)
for (i in length(Stationary_Checks)){
print(Stationary_Checks[[i]])
}
n_f <- 8 # number of factors determined by Bai and Ng information critera
p_f <-1 # vector autoregressive order of the factors, we found that by BIC this is equal to 1
q_v <- 1 # autoregressive order of the idiosyncratic errors
S<-1:119# indices of the variables included in estimating the factors. Useful for determining the position of the policy variable which has been ordered last
h_max=20 #  maximum horizon - the impulse response function is evaluated from horizon 0 to h_max
set.seed(1) # We use set.seed(9) in the calibration
########################## DENSE DYNAMIC FACTOR MODEL ##########################
#factors by pc, VAR by OLS, can take a few minutes to run
Dense_DFM<-Estimate_DFM(Data, n_f = n_f, lags_f = p_f, lags_v = q_v, max_EV = 0.98, undo_scale=TRUE, factor_method = "pc", VAR_method="OLS")
Dense_IRF<-impulse_response_ABCD(Dense_DFM$factors, Dense_DFM$idio, S, 20, policy_var = length(S), outcome_var = 1) # Industrial Production
#evidence for sparsity
r2_mat = matrix(NA, nrow = 118, ncol = 8,
dimnames = list(colnames(Data), paste0("Factor", 1:8)))
for (i in 1:ncol(Dense_DFM$factors$F_hat)) {
fac_name = colnames(r2_mat)[i]
for (j in 1:118) {
reg <- lm(Data[, j] ~ Dense_DFM$factors$F_hat[, i])
r2_mat[j, i] = summary(reg)$r.squared
}
Plotdata = data.frame(variable = colnames(Data),R2 = as.numeric(r2_mat[,i]))
print(
ggplot(Plotdata, aes(x = variable, y = R2)) +
geom_bar(stat = "identity") +
labs(
title = bquote(R^2 ~ " for regression of each variable on" ~.(fac_name)),
x = "Variable",
y = expression(R^2)
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
print(
ggplot(data.frame(variable = colnames(Data),FactorLoading = as.numeric((Dense_DFM$factors$Lambda[,i]))) , aes(x = variable, y = FactorLoading)) +
geom_bar(stat = "identity") +
labs(
title = bquote("Factor Loadings for" ~.(fac_name)),
x = "Variable",
y = "Factor Loading"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
return(r2_mat)
}
#################################################### SPARSE DYNAMIC FACTOR MODEL #########################################################################
#Sparse_DFM<-Estimate_DFM(Data,n_f=n_f, lags_f = 1, lags_v = 1, max_EV = 0.98, undo_scale=TRUE, factor_method = "sWF", VAR_method="lasso")
#Sparse_IRF<-impulse_response_ABCD(Sparse_DFM$factors, Sparse_DFM$idio, S, 20, policy_var = length(S), outcome_var = 1) [1,]
Sparse_IRF = readRDS("Sparse_IRF.RData")
Sparse_DFM = readRDS("Sparse_DFM.RData")
cor_mat <- cor(Data, use = "pairwise.complete.obs")
heatmap(cor_mat)
rk(Data)
#If you see values close to 1, you have strong collinearity.
r2_sparse = matrix(NA, nrow = 119, ncol = 8,
dimnames = list(colnames(Data), paste0("Factor", 1:8)))
for (i in 1:ncol(Dense_DFM$factors$F_hat)) {
fac_name = colnames(r2_sparse)[i]
for (j in 1:118) {
reg <- lm(Data[, j] ~ Sparse_DFM$factors$F_hat[, i])
r2_mat[j, i] = summary(reg)$r.squared
}
Plotdata = data.frame(variable = colnames(Data),R2 = as.numeric(r2_mat[,i]))
print(
ggplot(Plotdata, aes(x = variable, y = R2)) +
geom_bar(stat = "identity") +
labs(
title = bquote(R^2 ~ " for regression of each variable on" ~.(fac_name)),
x = "Variable",
y = expression(R^2)
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
print(
ggplot(data.frame(variable = colnames(Data),FactorLoading = as.numeric((Dense_DFM$factors$Lambda[,i]))) , aes(x = variable, y = FactorLoading)) +
geom_bar(stat = "identity") +
labs(
title = bquote("Factor Loadings for" ~.(fac_name)),
x = "Variable",
y = "Factor Loading"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
return(r2_mat)
}
# Saving DFM Data Locally
saveRDS(Dense_DFM, file="Dense_DFM.RData")
saveRDS(Dense_IRF, file="Dense_IRF.RData")
saveRDS(Sparse_DFM, file="Sparse_DFM.RData")
saveRDS(Sparse_IRF, file="Sparse_IRF.RData")
### Agnostic Identification for Shocks ### - after 10,000 iterations, unable to find contemporaneous/rotation matrix such that Sparse CPI is negative
F_hat = Sparse_DFM$factors$F_hat
Phi_hat = Sparse_DFM$factors$Phi
Sigma_eta = cov(Sparse_DFM$VAR_resid)
neg_index = c(1:4)
shock_id = 119
n1=1
n2=10
lag = 1
keep_Sigma <- list()
keep_H     <- list()
keep_IRF <-list()
n_rotations = 10
seed=9
factors = sWF_lasso_DFM$factors
idio = sWF_lasso_DFM$idio
Sigma_eta = cov(sWF_lasso_DFM$VAR_resid)
agnostic_H_all <- function(n_rotations, factors, idio, Sigma_eta, S,
h_max = 20, policy_var, outcome_var, neg_index,seed=2){
# Load parallel back-end
if (!requireNamespace("doParallel", quietly = TRUE)) {
stop("Package 'doParallel' is required for parallel execution")
View(all_list['EAdata'])
View(all_list[['EAdata']])
